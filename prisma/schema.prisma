// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String?
  lastName     String?
  username     String?  @unique
  email        String?  @unique
  password     String
  profileImage String?  @map("profile_image")
  role         Role
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  trips        Trip[]

  @@map("user")
}

enum Role {
  USER
  ADMIN
}

model Destination {
  id     Int     @id @default(autoincrement())
  name   String
  lat    Float
  lng    Float
  places Place[]
  trips  Trip[]

  @@map("destination")
}

model Trip {
  id            Int          @id @default(autoincrement())
  name          String
  days          Int          @default(1)
  people        Int          @default(1)
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime     @updatedAt @map("updated_at") @db.Timestamp(0)
  userId        Int          @map("user_id")
  startDate     DateTime  
  endDate       DateTime
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  places        Trip_place[]
  destinationId Int          @map("destination_id")
  destination   Destination  @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@map("trip")
}

model Trip_place {
  id       Int   @id @default(autoincrement())
  dayIndex Int   @map("day_index")
  tripId   Int   @map("trip_id")
  placeId  Int   @map("place_id")
  trip     Trip  @relation(fields: [tripId], references: [id], onDelete: Cascade)
  place    Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@map("trip_place")
}

model Place {
  id            Int          @id @default(autoincrement())
  name          String
  description   String?
  placeImage    String?      @map("place_image")
  lat           Float
  lng           Float
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime     @updatedAt @map("updated_at") @db.Timestamp(0)
  trips         Trip_place[]
  categoryId    Int          @map("category_id")
  categories    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  destinationId Int          @map("destination_id")
  destination   Destination  @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  @@map("place")
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  places Place[]

  @@map("category")
}
